@page
@model Shofy.Pages.Admin.ChatModel
@{
    Layout = "_AdminLayout";

    ViewData["Title"] = "Chat";
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        let selectedOrderId = @(Model.SelectedOrderId?.ToString() ?? "null");

        // Start SignalR connection and handle initial load
        connection.start().then(function () {
            console.log("SignalR Connected!");
            if (selectedOrderId) {
                selectOrder(selectedOrderId, getUserIdForOrder(selectedOrderId));
            }
        }).catch(function (err) {
            console.error(err.toString());
        });

        // Handle receiving messages
        connection.on("ReceiveMessage", function (message) {
            if (message.orderId === selectedOrderId) {
                appendMessage(message);
            }
            updateOrderList();
        });

        // Handle order list updates
        connection.on("UpdateOrderList", function () {
            updateOrderList();
        });

        // Helper function to get userId for an order
        function getUserIdForOrder(orderId) {
            const orders = @Html.Raw(Json.Serialize(Model.Orders));
            const order = orders.find(o => o.orderID === orderId);
            return order ? order.userID : null;
        }

        // Append message to chat
        function appendMessage(message) {
            const chatMessages = document.getElementById("chatMessages");
            if (!chatMessages) return;

            const messageDiv = document.createElement("div");
            const currentUserId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
            const isCurrentUser = message.senderId.toString() === currentUserId;

            messageDiv.className = `message ${isCurrentUser ? "message-sent" : "message-received"}`;
            messageDiv.innerHTML = `
                        <div class="${isCurrentUser ? "message-sent" : "message-received"}">
                            <p class="mb-0">${message.message}</p>
                            <small class="${isCurrentUser ? "text-white-50" : "text-muted"}">
                                ${new Date(message.sentDate).toLocaleTimeString()}
                            </small>
                        </div>
                    `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Send message
        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message && selectedOrderId) {
                const userIdInput = document.getElementById("selectedUserId");
                if (!userIdInput) return;

                const userId = parseInt(userIdInput.value);
                connection.invoke("SendMessage", message, selectedOrderId, userId)
                    .then(() => {
                        messageInput.value = "";
                    })
                    .catch(function (err) {
                        console.error(err.toString());
                    });
            }
        }

        // Select order and load chat
        function selectOrder(orderId, userId) {
            if (selectedOrderId && selectedOrderId !== orderId) {
                connection.invoke("LeaveOrderGroup", selectedOrderId);
            }
            selectedOrderId = orderId;
            const userIdInput = document.getElementById("selectedUserId");
            if (userIdInput) {
                userIdInput.value = userId;
            }
            connection.invoke("JoinOrderGroup", orderId)
                .then(() => {
                    loadMessages(orderId);
                    // Update URL to reflect selected order
                    window.history.pushState({}, '', `?orderId=${orderId}`);
                })
                .catch(err => console.error(err.toString()));
        }

        // Load messages for an order
        async function loadMessages(orderId) {
            try {
                const response = await fetch(`?handler=Messages&orderId=${orderId}`);
                const messages = await response.json();
                const chatMessages = document.getElementById("chatMessages");
                if (chatMessages) {
                    chatMessages.innerHTML = "";
                    messages.forEach(appendMessage);
                }
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        // Update order list
        async function updateOrderList() {
            try {
                const response = await fetch(window.location.pathname);
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newOrderList = doc.querySelector('.chat-list');
                const currentOrderList = document.querySelector('.chat-list');
                if (newOrderList && currentOrderList) {
                    currentOrderList.innerHTML = newOrderList.innerHTML;
                }
            } catch (error) {
                console.error("Error updating order list:", error);
            }
        }

        // Handle Enter key in message input
        document.addEventListener("keypress", function (e) {
            if (e.target.id === "messageInput" && e.key === "Enter") {
                sendMessage();
            }
        });
    </script>
}

<style>
    .chat-container {
        height: 620px;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .sidebar {
        border-right: 1px solid #e9ecef;
        height: 100%;
    }

    .chat-list {
        height: calc(100% - 60px);
        overflow-y: auto;
    }

    .chat-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f1f1f1;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .chat-item:hover {
        background-color: #f8f9fa;
    }

    .chat-item.active {
        background-color: #f0f2ff;
    }

    .chat-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .chat-header {
        border-bottom: 1px solid #e9ecef;
        padding: 1rem;
        background-color: #fff;
    }

    .chat-messages {
        height: calc(100% - 130px);
        overflow-y: auto;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .message {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message-sent {
        background-color: #6c5ce7;
        color: white;
        padding: 0.75rem;
        border-radius: 1rem;
        margin-left: auto;
        max-width: 75%;
        align-self: flex-end;
    }

    .message-received {
        background-color: #fff;
        padding: 0.75rem;
        border-radius: 1rem;
        margin-right: auto;
        max-width: 75%;
        align-self: flex-start;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .chat-input {
        border-top: 1px solid #e9ecef;
        padding: 1rem;
        background-color: #fff;
    }

    .unread-badge {
        background-color: #ff6b6b;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .order-info {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .order-status {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 1rem;
        background-color: #e9ecef;
    }

    .status-completed {
        background-color: #dcf5e7;
        color: #0f766e;
    }

    .status-processing {
        background-color: #fff7ed;
        color: #9a3412;
    }

    .status-pending {
        background-color: #fef2f2;
        color: #991b1b;
    }

    .status-canceled {
        background-color: #fef2f2;
        color: #991b1b;
    }
</style>


<div class="container-fluid">
    <div class="chat-container row m-0">
        <!-- Sidebar -->
        <div class="col-3 p-0">
            <div class="chat-list">
                @foreach (var order in Model.Orders)
                {
                    <div class="chat-item @(order.OrderID == Model.SelectedOrderId ? "active" : "")"
                        onclick="selectOrder(@order.OrderID, @order.UserID)">
                        <div class="d-flex align-items-center">
                            <img src="@(string.IsNullOrEmpty(order.User?.Avatar) ? "/images/default-avatar.png" : order.User.Avatar)"
                                class="chat-avatar" alt="@order.User?.Username">
                            <div class="ms-3 flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">@order.User?.Username</h6>
                                    <small class="text-muted">@order.OrderedDate.ToString("MM/dd/yyyy")</small>
                                </div>
                                <div class="order-info">
                                    <span class="order-status @($"status-{order.Status.ToLower()}")">@order.Status</span>
                                    <span class="ms-2">#@order.OrderID</span>
                                </div>
                            </div>
                            @if (order.Messages?.Any(m => !m.IsRead && m.ReceiverID.ToString() ==
                                                    User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) == true)
                            {
                                <span class="ms-2 unread-badge">
                                    @order.Messages.Count(m => !m.IsRead && m.ReceiverID.ToString() ==
                                    User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                        </span>
                                                }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Main Chat Area -->
        <!-- Main Chat Area -->
        <div class="col-9 p-0">
            @if (Model.SelectedOrderId.HasValue)
            {
                var selectedOrder = Model.Orders.FirstOrDefault(o => o.OrderID == Model.SelectedOrderId);
                if (selectedOrder != null)
                {
                    <div class="chat-header d-flex align-items-center">
                        <img src="@(string.IsNullOrEmpty(selectedOrder.User?.Avatar) ? "/images/default-avatar.png" : selectedOrder.User.Avatar)"
                            class="chat-avatar" alt="@selectedOrder.User?.Username">
                        <div class="ms-3">
                            <h6 class="mb-0">@selectedOrder.User?.Username</h6>
                            <div class="order-info">
                                <span
                                    class="order-status @($"status-{selectedOrder.Status.ToLower()}")">@selectedOrder.Status</span>
                                <span class="ms-2">Order #@selectedOrder.OrderID</span>
                            </div>
                        </div>
                    </div>

                    <div id="chatMessages" class="chat-messages">
                    </div>

                    <div class="chat-input">
                        <input type="hidden" id="selectedUserId" value="@selectedOrder.UserID">
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                            <button class="btn btn-primary" onclick="sendMessage()">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="text-center text-muted">
                            <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                            <h5 class="mt-3">Order not found</h5>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">Select an order to start chatting</h5>
                    </div>
                </div>
            }
        </div>
    </div>
</div>