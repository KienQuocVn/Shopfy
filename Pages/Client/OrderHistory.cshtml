@page
@model Shofy.Pages.Client.OrderHistoryModel
@{
    ViewData["Title"] = "Lịch sử đơn hàng";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
<style>
    .order-container {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        padding: 2rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #0f172a;
    }

    .filter-section {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .order-card {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .order-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .order-number {
        font-weight: 600;
        color: #0f172a;
    }

    .order-date {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .order-status {
        padding: 0.35rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .status-completed {
        background-color: #dcf5e7;
        color: #0f766e;
    }

    .status-processing {
        background-color: #fff7ed;
        color: #9a3412;
    }

    .status-pending {
        background-color: #fef2f2;
        color: #991b1b;
    }

    .status-canceled {
        background-color: #fef2f2;
        color: #991b1b;
    }

    .product-item {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .product-image {
        width: 80px;
        height: 80px;
        border-radius: 8px;
        object-fit: cover;
        margin-right: 1rem;
    }

    .product-details {
        flex-grow: 1;
    }

    .product-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .product-price {
        font-weight: 600;
        color: #0f172a;
    }

    .product-quantity {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .order-total {
        text-align: right;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .total-label {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .total-amount {
        font-size: 1.25rem;
        font-weight: 600;
        color: #0f172a;
    }

    .btn-filter {
        background-color: #0f172a;
        color: #fff;
        border: none;
        padding: 0.5rem 1rem;
    }

    .btn-filter:hover {
        background-color: #1e293b;
        color: #fff;
    }

    .pagination {
        margin-top: 2rem;
    }

    .page-link {
        color: #0f172a;
        border: 1px solid #dee2e6;
        padding: 0.5rem 1rem;
    }

    .page-link:hover {
        background-color: #0f172a;
        color: #fff;
        border-color: #0f172a;
    }

    .page-item.active .page-link {
        background-color: #0f172a;
        border-color: #0f172a;
    }

    /* Chat styles */
    .chat-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
    }

    .chat-messages {
        height: 300px;
        overflow-y: auto;
        padding: 1rem;
        background-color: white;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .message {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message-sent {
        background-color: #6c5ce7;
        color: white;
        padding: 0.75rem;
        border-radius: 1rem;
        margin-left: auto;
        max-width: 75%;
        align-self: flex-end;
    }

    .message-received {
        background-color: #f8f9fa;
        padding: 0.75rem;
        border-radius: 1rem;
        margin-right: auto;
        max-width: 75%;
        align-self: flex-start;
    }

    .chat-input {
        display: flex;
        gap: 0.5rem;
    }

    .chat-input input {
        flex-grow: 1;
    }
</style>

<div class="container">
    <div class="order-container">
        <h1 class="page-title">
            <i class="bi bi-clock-history me-2"></i>
            Lịch sử đơn hàng
        </h1>

        <!-- Filter Section -->
        <form method="get" class="filter-section">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Khoảng thời gian</label>
                    <select class="form-select" asp-for="DateRange" onchange="this.form.submit()">
                        <option value="">Tất cả thời gian</option>
                        <option value="Last30Days">30 ngày qua</option>
                        <option value="Last3Months">3 tháng qua</option>
                        <option value="Last6Months">6 tháng qua</option>
                        <option value="LastYear">Năm qua</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Trạng thái</label>
                    <select class="form-select" asp-for="Status" onchange="this.form.submit()">
                        <option value="All Status">Tất cả trạng thái</option>
                        <option value="Processing">Đang xử lý</option>
                        <option value="Pending">Đang chờ</option>
                        <option value="Completed">Hoàn thành</option>
                        <option value="Canceled">Đã hủy</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Tìm kiếm đơn hàng</label>
                    <input type="text" class="form-control" asp-for="SearchTerm" placeholder="Số đơn hàng hoặc tên sản phẩm">
                </div>
                <div class="col-md-2">
                    <label class="form-label"> </label>
                    <button type="submit" class="btn btn-filter w-100">
                        <i class="bi bi-search me-2"></i>Tìm kiếm
                    </button>
                </div>
            </div>
        </form>

        <!-- Order List -->
        <div class="order-list">
            @if (Model.Orders.Count == 0)
            {
                <div class="text-center text-muted p-4">
                    Không tìm thấy đơn hàng.
                </div>
            }
            else
            {
                @foreach (var order in Model.Orders)
                {
                    <div class="order-card">
                        <div class="order-header">
                            <div>
                                <div class="order-number">#ORD-@order.OrderID</div>
                                <div class="order-date">@order.OrderedDate.ToString("MMMM dd, yyyy")</div>
                            </div>
                            <span class="order-status @(order.Status.ToLower() == "completed" ? "status-completed" : order.Status.ToLower() == "processing" ? "status-processing" : order.Status.ToLower() == "pending" ? "status-pending" : "status-canceled")">
                                @order.Status
                            </span>
                        </div>
                        @if (order.OrderDetails != null)
                        {
                            @foreach (var detail in order.OrderDetails)
                            {
                                <div class="product-item">
                                    <img src="~/images/@detail.Product?.ImagePath" alt="@detail.Product?.Name" class="product-image">
                                    <div class="product-details">
                                        <div class="product-name">@detail.Product?.Name</div>
                                        <div class="product-price">@detail.UnitPrice.ToString("#,##0.## ₫",
                                        System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))</div>
                                        <div class="product-quantity">Số lượng: @detail.Quantity</div>
                                    </div>
                                </div>
                            }
                        }
                        <div class="order-total">
                            <div class="total-label">Tổng số tiền</div>
                            <div class="total-amount">@order.TotalPrice.ToString("#,##0.## ₫",
                                        System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))</div>
                        </div>
                        @* <div class="mt-2 d-flex gap-2">
                            <a class="btn text-light" asp-page="/Client/OrderTracking" asp-route-id="@order.OrderID" style="background-color: #717fe0;">Xem chi tiết</a>
                            <button class="btn btn-primary" onclick="toggleChat(@order.OrderID)">
                                <i class="bi bi-chat-dots me-2"></i>Chat với Admin
                            </button>
                        </div> *@

                        <div id="chatContainer-@order.OrderID" class="chat-container mt-3" style="display: none;">
                            <div class="chat-messages" id="chatMessages-@order.OrderID">
                            </div>
                            <div class="chat-input">
                                <input type="text" id="messageInput-@order.OrderID" class="form-control" placeholder="Nhập tin nhắn...">
                                <button class="btn btn-primary" onclick="sendMessage(@order.OrderID)">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pagination -->
        <nav aria-label="Order history pagination">
            <ul class="pagination justify-content-center">
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Trước</a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                    <a class="page-link" href="#">Tiếp theo</a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        let selectedOrderId = null;

        // Start SignalR connection
        connection.start().then(function () {
            console.log("SignalR Connected!");
        }).catch(function (err) {
            console.error(err.toString());
        });

        // Handle receiving messages
        connection.on("ReceiveMessage", function (message) {
            if (message.orderId === selectedOrderId) {
                appendMessage(message);
            }
        });

        // Append message to chat
        function appendMessage(message) {
            const chatMessages = document.getElementById(`chatMessages-${message.orderId}`);
            if (!chatMessages) return;

            const messageDiv = document.createElement("div");
            const currentUserId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
            const isCurrentUser = message.senderId.toString() === currentUserId;

            messageDiv.className = `message ${isCurrentUser ? "message-sent" : "message-received"}`;
            messageDiv.innerHTML = `
                <div class="${isCurrentUser ? "message-sent" : "message-received"}">
                    <p class="mb-0">${message.message}</p>
                    <small class="${isCurrentUser ? "text-white-50" : "text-muted"}">
                        ${new Date(message.sentDate).toLocaleTimeString()}
                    </small>
                </div>
            `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Send message
        function sendMessage(orderId) {
            const messageInput = document.getElementById(`messageInput-${orderId}`);
            const message = messageInput.value.trim();

            if (message) {
                connection.invoke("SendMessage", message, orderId, 1) // 1 là ID của admin
                    .then(() => {
                        messageInput.value = "";
                    })
                    .catch(function (err) {
                        console.error(err.toString());
                    });
            }
        }

        // Toggle chat window
        function toggleChat(orderId) {
            const chatContainer = document.getElementById(`chatContainer-${orderId}`);
            if (chatContainer.style.display === "none") {
                chatContainer.style.display = "block";
                selectedOrderId = orderId;
                connection.invoke("JoinOrderGroup", orderId)
                    .then(() => loadMessages(orderId))
                    .catch(err => console.error(err.toString()));
            } else {
                chatContainer.style.display = "none";
                selectedOrderId = null;
                connection.invoke("LeaveOrderGroup", orderId)
                    .catch(err => console.error(err.toString()));
            }
        }

        // Load messages for an order
        async function loadMessages(orderId) {
            try {
                const response = await fetch(`?handler=Messages&orderId=${orderId}`);
                const messages = await response.json();
                const chatMessages = document.getElementById(`chatMessages-${orderId}`);
                if (chatMessages) {
                    chatMessages.innerHTML = "";
                    messages.forEach(appendMessage);
                }
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        // Handle Enter key in message input
        document.addEventListener("keypress", function (e) {
            if (e.target.id.startsWith("messageInput-") && e.key === "Enter") {
                const orderId = e.target.id.split("-")[1];
                sendMessage(orderId);
            }
        });
    </script>
}